/*
 * Lily58 ZMK keymap – helper-macro + diagram
 * Copyright (c) 2020-2025 you
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "zmk-helpers/helper.h"
#include <dt-bindings/zmk/keys.h>

/* short-hands */
#define ___ &trans
#define DEF 0
#define LOW 1
#define RAI 2

/* opposite-hand key-positions (0-28 L, 29-57 R) */
#define OPP_RIGHT 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
#define OPP_LEFT   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28

/* ───────────── Timer-less homerow mod macros ───────────── */
ZMK_HOLD_TAP(lhm_a,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp A>, <&kp LCTRL>;
    hold-trigger-key-positions = <OPP_RIGHT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(lhm_s,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp S>, <&kp LALT>;
    hold-trigger-key-positions = <OPP_RIGHT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(lhm_d,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp D>, <&kp LSHFT>;
    hold-trigger-key-positions = <OPP_RIGHT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(lhm_f,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp F>, <&kp LGUI>;
    hold-trigger-key-positions = <OPP_RIGHT>;
    hold-trigger-on-release;
);

/* right hand */
ZMK_HOLD_TAP(rhm_j,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp J>, <&kp RGUI>;
    hold-trigger-key-positions = <OPP_LEFT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(rhm_k,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp K>, <&kp RSHFT>;
    hold-trigger-key-positions = <OPP_LEFT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(rhm_l,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp L>, <&kp RALT>;
    hold-trigger-key-positions = <OPP_LEFT>;
    hold-trigger-on-release;
);

ZMK_HOLD_TAP(rhm_scln,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms    = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp SEMI>, <&kp RCTRL>;
    hold-trigger-key-positions = <OPP_LEFT>;
    hold-trigger-on-release;
);

/* ──────────────── L A Y E R S  ────────────────────────── */

ZMK_LAYER(default_layer,
/* ╔═════════════════════════════════════ left ═════════════════════════════════════╗   ╔═════════════════════════════════════ right ═══════════════════════════════════╗ */
       &kp ESC     &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                     &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &kp GRAVE
       &kp TAB     &kp Q      &kp W      &kp E      &kp R      &kp T                      &kp Y      &kp U      &kp I      &kp O      &kp P      &kp MINUS
       &kp LSHFT   &lhm_a     &lhm_s     &lhm_d     &lhm_f     &kp G                      &kp H      &rhm_j     &rhm_k     &rhm_l     &rhm_scln  &kp SQT
       &kp LCTRL   &kp Z      &kp X      &kp C      &kp V      &kp B        &kp LBKT &kp RBKT     &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH  &kp RSHFT
                                &kp LALT &kp LGUI   &mo LOW    &kp SPACE     &kp RET   &mo RAI    &kp BSPC  &kp RGUI
/* ╚═════════════════════════════════════ thumbs ═════════════════════════════════════╝   ╚════════════════════════════════════ thumbs ══════════════════════════════════╝ */
)

/* LOWER (LOW = 1) */
ZMK_LAYER(lower_layer,
       &bt BT_CLR  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4           ___         ___        ___        ___        ___        ___
       &kp F1      &kp F2         &kp F3         &kp F4         &kp F5         &kp F6                 &kp F7      &kp F8     &kp F9     &kp F10    &kp F11    &kp F12
       &kp GRAVE   &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR     &kp PRCNT              &kp CARET   &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp TILDE
       ___         &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG ___ ___ ___ ___               ___         &kp MINUS  &kp PLUS   &kp LBRC   &kp RBRC   &kp PIPE
                                ___          ___          ___          ___            ___          ___          ___         ___
)

/* RAISE (RAI = 2) */
ZMK_LAYER(raise_layer,
       ___         ___          ___          ___          ___          ___                      ___         ___         ___         ___         ___         ___
       &kp GRAVE   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                    &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      ___
       &kp F1      &kp F2       &kp F3       &kp F4       &kp F5       &kp F6                    ___         &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   ___
       &kp F7      &kp F8       &kp F9       &kp F10      &kp F11      &kp F12      ___ ___      &kp KP_PLUS &kp MINUS   &kp EQUAL   &kp LBKT    &kp RBKT    &kp BSLH
                                ___          ___          ___          ___            ___          ___         ___         ___
)

/* same sensor binding for all layers */
sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
